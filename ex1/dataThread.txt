Ex1 Threads, Input and Data

	For this exercise you are going to be making a multi-threaded program. Their will be 2 threads, one thread will take input and pack it into a data struct that you will create and copy it into a buffer. The main thread will also have access to the buffer, it will check for data and if present it will unpack the data and display the string contained.
	The Data struct will essentially be a wrapper for the strings the user is inputting. In this example it may not be necesarry to have the meta-data about the string size, because of null terminating characters. But this struct and the related functions will serve as basis for sending bigger and more complicated data structures through networks.
	You will be responsible for writing 4 files, data.h, data.c, input.h, input.c. The main thread is already written for you, it uses a mutex to lock the thread when it is checking the buffer and reading from it. Your input thread shall use the same mutex lock to lock itself before performing operations on the buffer as well.

Data.h

typedef struct Data {
	int bytes;
	void *arr;
} Data;

Data *makeData(void *dat, int bytes);
	Takes in pointer to data and an amount of bytes that are in the data. It creates Data *d and allocates d->arr to the size of bytes and then copies the data from dat into d→arr.

void *writeData(Data *d);
	Allocates a buffer with the exact size of the Data and then copies the data being pointed to by the Data struct into the buffer along with the size of the buffer. Returns a pointer to the buffer.

Data *readData(void *buffer);
	Declares a Data struct. Reads from buffer created with the writeData function. First it reads size from the buffer (and copies it into the Data struct’s bytes field) so that it knows how much data is in the buffer. Then it reads that much data from the buffer and copies it into the Data struct’s arr field.

void freeData(Data *d);
	Free the allocated array in d and also d itself.

Extra
void *flipEndian(void *buff, int size);
	takes in an buffer with the size of the data in the buffer. It goes through byte by byte and flips the endianess of the data.



Input.h
void *inputThread(void *buffer);
	Receives a shared buffer with a pthread_mutex_t stored in it.  Pull the pthread_mutex_t out and store it. Test your code to make sure that this lock is properly connected to the pthread_mutex_t being used in main.
	buffer is shared between this thread and the main thread. In a loop have this function take in user input and stores it in a buffer, when the user hits enter take in the string from the input buffer and copy it into the shared buffer via a Data struct. The main thread should then pick up that there is data in the buffer, and unpack it to display the string the user typed in.
	If the user hits the escape key have the program end. Hint take in the user input charavter at a time, rather than line by line.

Testing and Compiling
	You will receive a Makefile that will be used to compile your code. Inside the Makefile is a command test: valgrind –fair-sched=yes –leak-check=full –show-leak-kindsa=all ./data
This will run valgrind and properly schedule your threads and checl for memory leaks.
 
